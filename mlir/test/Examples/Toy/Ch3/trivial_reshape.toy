# RUN: toyc-ch3 %s -emit=mlir -opt 2>&1 | FileCheck %s

def main() {
  var a<2,1> = [1, 2];
  var b<2,1> = a;
  var c<2,1> = b;
  print(c);
}

# CHECK-LABEL: toy.func @main()
# CHECK-NEXT:    [[VAL_0:%.*]] = toy.constant
# CHECK-SAME: 		dense<[
# CHECK-SAME: 	 	[1.000000e+00], [2.000000e+00]
# CHECK-SAME: 		]> : tensor<2x1xf64>
# CHECK-NEXT:    toy.print [[VAL_0]] : tensor<2x1xf64>
# CHECK-NEXT:    toy.return

# 参考: https://mp.weixin.qq.com/s/3N9DK7aQtjoLgs-s0lP-jg
# examples\toy\CMakeLists.txt
#  > examples\toy\Ch3\CMakeLists.txt <-提供*.td生成的cpp examples\toy\Ch3\include\toy\CMakeLists.txt
# ./toyc-ch3 ../../mlir/test/Examples/Toy/Ch3/trivial_reshape.toy -emit=mlir -mlir-print-debuginfo
# toyc.cpp.main()->dumpMLIR()->mlirGen()->'mlirGen(ExprAST'(???怎么调到这里) . 首先有一个MLIRGen函数负责遍历AST。具体在mlir/examples/toy/Ch3/mlir/MLIRGen.cpp文件中实现，里面有一个mlirGen函数
#  < 冗余的张量reshape消除的优化是在examples\toy\Ch3\mlir\ToyCombine.td中用DDR规则的方式去做的,并在ToyCombine.cpp中注册. ToyCombine.td中演示了多种用DDR做rewrite的方式
#  < examples\toy\Ch3\CMakeLists.txt在生成toyc-ch3时,用的就是遵从Dialect.h.inc接口,基于Dialect.cpp.inc做部分客户化后的Dialect.cpp,而不是直接用生成的cpp
#  < 对生成的toy/Dialect.cpp.inc的客户化写在examples\toy\Ch3\mlir\Dialect.cpp中. //BTBT 注意include生成cpp的位置 //参考Ops.td和 mlir\Dialect.cpp是如何做客户化的
#  < 根据examples\toy\Ch3\include\toy\CMakeLists.txt Ops.td 会生成cpp文件 Ops.h.inc, Ops.cpp.inc, Dialect.h.inc, Dialect.cpp.inc